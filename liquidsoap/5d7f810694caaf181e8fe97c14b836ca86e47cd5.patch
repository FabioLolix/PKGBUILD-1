From 5d7f810694caaf181e8fe97c14b836ca86e47cd5 Mon Sep 17 00:00:00 2001
From: Romain Beauxis <toots@rastageeks.org>
Date: Mon, 5 Oct 2020 09:27:07 -0500
Subject: [PATCH] Backport support for newest alsa.

DEPS=ocaml-alsa#master
---
 src/io/alsa_io.ml       | 22 +++++++++++-----------
 src/outputs/alsa_out.ml |  2 +-
 src/sources/alsa_in.ml  |  6 ++++--
 3 files changed, 16 insertions(+), 14 deletions(-)

diff --git a/src/io/alsa_io.ml b/src/io/alsa_io.ml
index 8f5bbca7d..58f383506 100644
--- a/src/io/alsa_io.ml
+++ b/src/io/alsa_io.ml
@@ -71,12 +71,12 @@ class virtual base ~kind dev mode =
                 (fun pcm buf ofs len ->
                   let sbuf = Bytes.create (2 * len * Array.length buf) in
                   Audio.S16LE.of_audio buf ofs sbuf 0 len;
-                  Pcm.writei pcm (Bytes.unsafe_to_string sbuf) 0 len);
+                  Pcm.writei pcm sbuf 0 len);
               read <-
                 (fun pcm buf ofs len ->
-                  let sbuf = String.make (2 * 2 * len) (Char.chr 0) in
+                  let sbuf = Bytes.make (2 * 2 * len) (Char.chr 0) in
                   let r = Pcm.readi pcm sbuf 0 len in
-                  Audio.S16LE.to_audio sbuf 0 buf ofs r;
+                  Audio.S16LE.to_audio (Bytes.unsafe_to_string sbuf) 0 buf ofs r;
                   r)
             with Alsa.Invalid_argument ->
               self#log#severe "Falling back on non-interleaved S16LE";
@@ -87,25 +87,25 @@ class virtual base ~kind dev mode =
                 (fun pcm buf ofs len ->
                   let sbuf =
                     Array.init channels (fun _ ->
-                        String.make (2 * len) (Char.chr 0))
+                        Bytes.make (2 * len) (Char.chr 0))
                   in
                   for c = 0 to Audio.channels buf - 1 do
-                    Audio.S16LE.of_audio
-                      [| buf.(c) |]
-                      ofs
-                      (Bytes.of_string sbuf.(c))
-                      0 len
+                    Audio.S16LE.of_audio [| buf.(c) |] ofs sbuf.(c) 0 len
                   done;
                   Pcm.writen pcm sbuf 0 len);
               read <-
                 (fun pcm buf ofs len ->
                   let sbuf =
                     Array.init channels (fun _ ->
-                        String.make (2 * len) (Char.chr 0))
+                        Bytes.make (2 * len) (Char.chr 0))
                   in
                   let r = Pcm.readn pcm sbuf 0 len in
                   for c = 0 to Audio.channels buf - 1 do
-                    Audio.S16LE.to_audio sbuf.(c) 0 [| buf.(c) |] ofs len
+                    Audio.S16LE.to_audio
+                      (Bytes.unsafe_to_string sbuf.(c))
+                      0
+                      [| buf.(c) |]
+                      ofs len
                   done;
                   r) ) );
         handle "channels" (Pcm.set_channels dev params) channels;
diff --git a/src/outputs/alsa_out.ml b/src/outputs/alsa_out.ml
index 29373d49e..0b38b5ceb 100644
--- a/src/outputs/alsa_out.ml
+++ b/src/outputs/alsa_out.ml
@@ -87,7 +87,7 @@ class output ~kind ~clock_safe ~infallible ~on_stop ~on_start ~start dev source
                     (fun pcm buf ofs len ->
                       let sbuf = Bytes.create (2 * len * Array.length buf) in
                       Audio.S16LE.of_audio buf ofs sbuf 0 len;
-                      Pcm.writei pcm (Bytes.unsafe_to_string sbuf) 0 len) );
+                      Pcm.writei pcm sbuf 0 len) );
               Pcm.set_channels dev params buffer_chans;
               alsa_rate <-
                 Pcm.set_rate_near dev params samples_per_second Dir_eq;
diff --git a/src/sources/alsa_in.ml b/src/sources/alsa_in.ml
index 47984b906..3ee8fa16c 100644
--- a/src/sources/alsa_in.ml
+++ b/src/sources/alsa_in.ml
@@ -97,9 +97,11 @@ class mic ~kind ~clock_safe device =
                 Pcm.set_format dev params Pcm.Format_s16_le;
                 read_fun <-
                   (fun pcm buf ofs len ->
-                    let sbuf = String.make (2 * 2 * len) (Char.chr 0) in
+                    let sbuf = Bytes.make (2 * 2 * len) (Char.chr 0) in
                     let r = Pcm.readi pcm sbuf 0 len in
-                    Audio.S16LE.to_audio sbuf 0 buf ofs r;
+                    Audio.S16LE.to_audio
+                      (Bytes.unsafe_to_string sbuf)
+                      0 buf ofs r;
                     r)
             end;
             sample_freq <- Pcm.set_rate_near dev params sample_freq Dir_eq;
